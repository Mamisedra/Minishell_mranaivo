For check expand

	// (*str)[*i] != '\0' && (*str)[*i] != '$' && (*str)[*i] != '"' &&
	// 		(*str)[*i] != '\'' && (*str)[*i] != ' ' && (*str)[*i] != '\t' &&
	// 		(*str)[*i] != '<' && (*str)[*i] != '>' && (*str)[*i] != '|')

	(pipe) => [tunnel]
	{
	->(fork)
	->(isbultin)
	->(execeve)
	}
	wait

Function :
	- pipe(fd[2]) : pour creer des canaux de communication entre processus (return < 0 : Error)
		*fd[0] = pour lecture;
		*fd[1] = pour ecriture;
	- fork(void) : cree une nouveau processus appelant (pid == 0 : processus child | < 0 Error);
	- dup(fd) : duplique une fd et retourn une new fd;
	- dup2(oldfd, newfd) : duplique old fd dans le newfd;
	- wait(int *status) : utiliser pour la synchronisation des processus dans un programme comportant des processus enfants. Pour attendre une fin de processus.
	- WIFEXITED(int status) : Processsus se termine normalement.
	- WIFSIGNALED(int status) : Processsus se termine par signal.
	- waitpid(pid_t, *status, ) :Informations supplémentaires avec status
Lorsque vous utilisez wait ou waitpid, la variable status contient des informations sur la manière dont le processus enfant s'est terminé. Vous pouvez utiliser les macros suivantes pour analyser cette variable :

WIFEXITED(status) : Vérifie si le processus enfant s'est terminé normalement.
WEXITSTATUS(status) : Si WIFEXITED est vrai, cette macro retourne le code de sortie du processus enfant.
WIFSIGNALED(status) : Vérifie si le processus enfant a été tué par un signal.
WTERMSIG(status) : Si WIFSIGNALED est vrai, cette macro retourne le numéro du signal qui a tué le processus.
WIFSTOPPED(status) : Vérifie si le processus enfant est arrêté (par exemple, suspendu par un signal).
WSTOPSIG(status) : Si WIFSTOPPED est vrai, cette macro retourne le signal qui a arrêté le processus.
WIFCONTINUED(status) : Vérifie si le processus enfant a été repris après une suspension. .
